plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
    alias(libs.plugins.google.services)
    alias(libs.plugins.firebase.crashlytics.gradle)
    alias(libs.plugins.ksp)
}

android {
    namespace 'co.candyhouse.app'

    compileSdk rootProject.ext.compileSdkVersion

    signingConfigs {
        release {
            def passStore = System.getenv("storePassword")
            def passKey = System.getenv("keyPassword")
            def ssmKeyAlias = System.getenv("keyAlias")
            storeFile file(rootProject.file('Sesame.jks').getCanonicalFile())
            storePassword "$passStore"
            keyPassword "$passKey"
            keyAlias "$ssmKeyAlias"

            // 处理 CI 环境中的签名文件
            if (System.getenv("CI") == "true") {
                println("CI signing...")
                // CI 环境中跳过签名配置检查，因为签名将由 GitHub Actions 处理
                storeFile = null
                storePassword = null
                keyPassword = null
                keyAlias = null
            }
        }
    }

    defaultConfig {
        def getGitHash = { ->
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'rev-parse', '--short=9', 'HEAD'
                standardOutput = stdout
            }
            return stdout.toString().trim()
        }
        applicationId 'co.candyhouse.sesame2'
        minSdk rootProject.ext.minSdkVersion
        targetSdk rootProject.ext.targetSdkVersion
        // 本地打包，开发者可以根据需要修改此值
        versionCode 266
        // 版本名称根据业务规则定义，有改动需要提交到master
        versionName '3.0.266'
        vectorDrawables.useSupportLibrary = true
        buildConfigField("String", "GIT_HASH", "\"${getGitHash}\"")
        ndk {
            debugSymbolLevel 'FULL'
        }

        // AWS Cognito 配置
        buildConfigField("String", "AWS_IDENTITY_POOL_ID", "\"${rootProject.ext['aws.cognito.identityPoolId']}\"")
        buildConfigField("String", "AWS_USER_POOL_ID", "\"${rootProject.ext['aws.cognito.userPoolId']}\"")
        buildConfigField("String", "AWS_APP_CLIENT_ID", "\"${rootProject.ext['aws.cognito.appClientId']}\"")

        // Google Maps API Key
        manifestPlaceholders = [
                GOOGLE_MAPS_API_KEY: rootProject.ext['google.maps.apiKey']
        ]
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            // 添加调试符号，debug is true
            debuggable true
            buildConfigField("String", "ch_user_server", "\"${rootProject.ext['candyhouse.sesame.app.api.dev']}\"")
            firebaseCrashlytics {
                mappingFileUploadEnabled = false
                nativeSymbolUploadEnabled = false
                unstrippedNativeLibsDir = null
                strippedNativeLibsDir = null
            }
        }

        release {
            minifyEnabled true
            shrinkResources true
            // 添加调试符号，release is false
            debuggable false
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'
            buildConfigField("String", "ch_user_server", "\"${rootProject.ext['candyhouse.sesame.app.api.prod']}\"")
            if (signingConfigs.release.storeFile != null) {
                println("Local signing...")
                signingConfig signingConfigs.release
            }
            ndk {
                debugSymbolLevel 'FULL'
            }
            firebaseCrashlytics {
                mappingFileUploadEnabled true
            }
        }

        ci {
            initWith release
            matchingFallbacks = ['release']
        }

    }

    // CI环境中重写versionCode
    applicationVariants.configureEach { variant ->
        if (variant.buildType.name == 'ci') {
            variant.outputs.configureEach { output ->
                // 检查是否在 CI 环境中
                if (System.getenv("CI") == "true") {
                    output.versionCodeOverride = Integer.parseInt(System.getenv("VERSION_CODE"))
                    println "Set CI version: ${output.versionCodeOverride}"
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding true
        buildConfig true
        compose true
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation project(':ir')
    implementation project(':sesame-sdk')

    implementation libs.androidx.work.runtime
    implementation libs.androidx.core.ktx.v180
    implementation libs.androidx.preference.ktx
    implementation libs.androidx.swiperefreshlayout

    implementation libs.core
    implementation libs.easypermissions
    implementation libs.material
    implementation libs.dfu
    implementation libs.stickyheaders
    implementation libs.wheelpicker
    implementation libs.autoresizeedittext
    implementation libs.indicatorseekbar
    implementation libs.loopview

    implementation libs.play.services.location
    implementation libs.play.services.maps

    implementation platform(libs.firebase.bom)
    implementation(libs.firebase.config.ktx)
    implementation libs.firebase.analytics.ktx
    implementation libs.firebase.messaging.ktx
    implementation libs.firebase.crashlytics.ktx
}